///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Sat Apr 01 2017 22:48:09]
// Generate from:
//   [github.com/vipally/gx/regable/gp/mapping.gp]
//   [github.com/vipally/_hefra/regable/regable.gpg] [idname_mapping]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2016 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Blog    : http://blog.csdn.net/vipally
// Site    : https://github.com/vipally
// BuildAt : 
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////

package regable

import (
	"fmt"
)

//key/value mapping
type IdNameMapping struct {
	normal  map[uint32]string
	reverse map[string]uint32
}

type IdNameMappingIdType uint32

func NewIdNameMapping() *IdNameMapping {
	p := &IdNameMapping{}
	p.Init()
	return p
}

func (this *IdNameMapping) Init() {
	this.normal = make(map[uint32]string)
	this.reverse = make(map[string]uint32)
}

//make mapping
func (this *IdNameMapping) Insert(k uint32, v string) (id IdNameMappingIdType, err error) {
	if _, ok := this.Find(k); ok {
		err = fmt.Errorf("dumplicate key : %#v", k)
		return
	}
	if _, ok := this.ReverseFind(v); ok {
		err = fmt.Errorf("dumplicate value : %#v", v)
		return
	}
	this.normal[k] = v
	this.reverse[v] = k
	return IdNameMappingIdType(k), nil
}

//remove by key
func (this *IdNameMapping) RemoveByKey(k uint32) (ok bool) {
	if v, find := this.Find(k); find {
		ok = find
		delete(this.normal, k)
		delete(this.reverse, v)
	}
	return
}

//remove by value
func (this *IdNameMapping) RemoveByValue(v string) (ok bool) {
	if k, find := this.ReverseFind(v); find {
		ok = find
		delete(this.normal, k)
		delete(this.reverse, v)
	}
	return
}

//find by key
func (this *IdNameMapping) Find(k uint32) (v string, ok bool) {
	v, ok = this.normal[k]
	return
}

//find by value
func (this *IdNameMapping) ReverseFind(v string) (k uint32, ok bool) {
	k, ok = this.reverse[v]
	return
}

//clear all mapping
func (this *IdNameMapping) Clear() {
	this.Init()
}
